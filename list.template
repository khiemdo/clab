struct List_$T
{
    u32     Count; 
    u32     capacity; 
    $T*     buffer; 
    void    (*clrfun)($T* element); 
    s32     (*cmpfun)($T x, $T y); 
    
    List_$T(u32 capacity, 
            void(*clrfun)($T*) = null, 
            s32(*cmpfun)($T, $T) = null)
    {
        this->Count = 0; 
        this->capacity = capacity; 
        this->buffer = CALLOC($T, capacity); 
        this->clrfun = clrfun; 
        this->cmpfun = cmpfun; 
    }
    
    bool empty()
    {
        return Count == 0; 
    }
    
    $T pop()
    {
        $T ret = last(); 
        removeat(Count - 1); 
        return ret; 
    }
    
    $T dequeue()
    {
        $T ret = first(); 
        removeat(0); 
        return ret; 
    }
    
    $T first()
    {
        return buffer[0]; 
    }
    
    $T last()
    {
        return buffer[Count - 1]; 
    }
    
    void destroy()
    {
        free(buffer); 
    }
    
    void add($T Value)
    {
        if (Count >= capacity)
        {
            capacity <<= 1; 
            buffer = RALLOC(buffer, $T, capacity); 
        }
        buffer[Count++] = Value; 
    }
    
    void removeat(u32 index)
    {
        for (u32 i = index, cnt = Count - index - 1; cnt > 0; i++, cnt--)
        buffer[i] = buffer[i + 1]; 
        if (clrfun) clrfun(&buffer[Count - 1]); 
        Count--; 
    }
    
    s32 find($T Value)
    {
        FOR(Count)
            if (cmpfun(buffer[i], Value))
                return i;
        return -1;
    }
    
    void remove($T Value)
    {
        s32 index = find(Value); 
        if (index == -1)
        return; 
        removeat(index); 
    }
    
    void clear()
    {
        if (clrfun)
        FOR(Count)
        clrfun(&buffer[i]); 
        Count = 0; 
    }
    
    $T& at(u32 index)
    {
        return buffer[index]; 
    }
    
    $T& operator [](u32 index)
    {
        return buffer[index]; 
    }
};

